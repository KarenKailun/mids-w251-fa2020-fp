FROM nvcr.io/nvidia/l4t-ml:r32.4.4-py3

RUN  pip3 install tqdm cython pycocotools gdown

RUN  apt-get -y update && \
     apt-get -y install python3-matplotlib python3-tk

RUN  git clone https://github.com/NVIDIA-AI-IOT/torch2trt && \
     cd torch2trt && \
     python3 setup.py install --plugins

RUN  git clone https://github.com/NVIDIA-AI-IOT/trt_pose && \
     cd trt_pose && \
     python3 setup.py install

ADD  s3/*.pth trt_pose/tasks/human_pose/

RUN  apt-get -y install fonts-freefont-otf fonts-noto

# Compile OpenCV with CUDA support

# install required libraries:
#    Generic tools:
RUN apt-get install -y build-essential apt-utils cmake pkg-config unzip yasm git checkinstall
RUN apt-get install -y libjpeg-dev libpng-dev libtiff-dev
#    Video/Audio Libs - FFMPEG, GSTREAMER, x264 and so on.
RUN apt-get install -y libavcodec-dev libavformat-dev libswscale-dev libavresample-dev
RUN apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
RUN apt-get install -y libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev 
RUN apt-get install -y libfaac-dev libmp3lame-dev libvorbis-dev
#    OpenCore - Adaptive Multi Rate Narrow Band (AMRNB) and Wide Band (AMRWB) speech codec
RUN apt-get install -y libopencore-amrnb-dev libopencore-amrwb-dev
#    Cameras programming interface libs
RUN apt-get install -y libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils && \
      cd /usr/include/linux && \
      ln -s -f ../libv4l1-videodev.h videodev.h && \
      cd ~
#    GTK lib for the graphical user functionalites coming from OpenCV highghui module
RUN apt-get install -y libgtk-3-dev
#    Python libraries for python3:
RUN apt-get install -y python3-dev python3-pip
RUN apt-get install -y python3-testresources
#    Parallelism library C++ for CPU
RUN apt-get install -y libtbb-dev
#    Optimization libraries for OpenCV
RUN apt-get install -y libatlas-base-dev gfortran
#    Optional libraries:
RUN apt-get install -y libprotobuf-dev protobuf-compiler
RUN apt-get install -y libgoogle-glog-dev libgflags-dev
RUN apt-get install -y libgphoto2-dev libeigen3-dev libhdf5-dev doxygen

# get sources
RUN cd ~ && \
  wget -O opencv.zip https://github.com/opencv/opencv/archive/4.4.0.zip && \
  wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.4.0.zip && \
  unzip opencv.zip && \
  unzip opencv_contrib.zip

RUN echo "Procced with the installation" && \
  cd ~/opencv-4.4.0 && \
  mkdir build && \
  cd build

# gstreamer python bindings
RUN apt-get install -y python3-gi python-gst-1.0

RUN cd ~/opencv-4.4.0/build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
        -D CMAKE_C_COMPILER=/usr/bin/gcc-7 \
        -D CMAKE_INSTALL_PREFIX=/usr/local \
        -D INSTALL_PYTHON_EXAMPLES=ON \
        -D INSTALL_C_EXAMPLES=OFF \
        -D WITH_TBB=ON \
        -D WITH_CUDA=ON \
        -D BUILD_opencv_cudacodec=OFF \
        -D ENABLE_FAST_MATH=1 \
        -D CUDA_FAST_MATH=1 \
        -D WITH_CUBLAS=1 \
        -D WITH_V4L=ON \
        -D WITH_QT=OFF \
        -D WITH_OPENGL=ON \
        -D WITH_GSTREAMER=ON \
        -D WITH_CUDNN=ON \
        -D OPENCV_DNN_CUDA=ON \
        -D CUDA_ARCH_BIN=7.2 \
        -D OPENCV_GENERATE_PKGCONFIG=ON \
        -D OPENCV_PC_FILE_NAME=opencv.pc \
        -D OPENCV_ENABLE_NONFREE=ON \
        -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-4.4.0/modules \
        -D BUILD_EXAMPLES=ON .. && \
    make -j6 && \
    make install

RUN pip3 install flask

CMD python3 -m repo.src.python.flask.detector_app
